// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ownerships/{id}": {
            "get": {
                "description": "Retrieves ownership details for a specific NFT by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Get NFT ownership information",
                "parameters": [
                    {
                        "type": "string",
                        "example": "0x06012c8cf97bead5deae237070f9587f8e7a266d:123456",
                        "description": "NFT ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved ownership data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.GeneralResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.OwnershipDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralResponse"
                        }
                    },
                    "404": {
                        "description": "NFT ownership not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralResponse"
                        }
                    }
                }
            }
        },
        "/trait-rarities": {
            "post": {
                "description": "returns rarity scores for specified traits in an NFT collection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Get trait rarities for NFTs",
                "parameters": [
                    {
                        "description": "Trait rarity request parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.TraitRarityRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully calculated trait rarities",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.GeneralResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.TraitRarityResponseDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralResponse"
                        }
                    },
                    "404": {
                        "description": "Collection or traits not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.GeneralResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "status": {
                    "$ref": "#/definitions/dto.Status"
                }
            }
        },
        "dto.Status": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "model.CreatorDTO": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "model.ExtendedTraitProperty": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "rarity": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "model.OwnershipDTO": {
            "type": "object",
            "properties": {
                "blockchain": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "collection": {
                    "type": "string"
                },
                "contract": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "creators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CreatorDTO"
                    }
                },
                "id": {
                    "type": "string"
                },
                "itemId": {
                    "type": "string"
                },
                "lastUpdatedAt": {
                    "type": "string"
                },
                "lazyValue": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "tokenId": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "model.TraitPropertyInput": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "model.TraitRarityRequestDTO": {
            "type": "object",
            "properties": {
                "collectionId": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TraitPropertyInput"
                    }
                }
            }
        },
        "model.TraitRarityResponseDTO": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "continuation": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "traits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ExtendedTraitProperty"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "{base_url}",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "rarible client api",
	Description:      "swagger doucmentation.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
